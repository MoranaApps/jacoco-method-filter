name: Publish / Release (manual)

on:
  workflow_dispatch:
    inputs:
      doRelease:
        description: "After publishing, call sonaRelease (finalize on Central)?"
        type: choice
        options: [ "yes", "no" ]
        default: "yes"
      scala213:
        description: "Build for Scala 2.13 (core)"
        type: boolean
        default: true
      runScripted:
        description: "Run sbt-plugin scripted test"
        type: boolean
        default: false

jobs:
  publish:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17
          cache: sbt

      - name: Install sbt (sbt-extras)
        run: |
          curl -fsSL https://raw.githubusercontent.com/dwijnand/sbt-extras/master/sbt -o sbt
          chmod +x sbt
          sudo mv sbt /usr/local/bin/

      - name: Import GPG private key
        run: |
          echo "${PGP_SECRET}" | gpg --batch --import
          gpg --list-secret-keys --keyid-format LONG
        env:
          PGP_SECRET: ${{ secrets.PGP_SECRET }}

      - name: Show sbt & Java
        run: |
          java -version
          sbt sbtVersion

      - name: Test (core + plugin)
        run: sbt +clean +test

      - name: Optional scripted test (sbt plugin)
        if: ${{ inputs.runScripted == 'true' }}
        run: |
          # Requires you to have a scripted test like sbt-plugin/src/sbt-test/jmf/basic
          sbt "project sbtPlugin" "scripted jmf/basic" -Dplugin.version=$(grep -E 'ThisBuild / version\s*:=' build.sbt | sed -E "s/.*:=\"([^\"]+)\".*/\1/")

      - name: Publish signed artifacts (core + plugin)
        run: |
          sbt +publishSigned
          sbt "project sbtPlugin" publishSigned
        env:
          SONATYPE_USERNAME: ${{ secrets.SONATYPE_USERNAME }}
          SONATYPE_PASSWORD: ${{ secrets.SONATYPE_PASSWORD }}
          PGP_PASSPHRASE:    ${{ secrets.PGP_PASSPHRASE }}

      - name: Upload staged bundle (debug artifact)
        run: |
          set -euo pipefail
      
          echo "Scanning for sonatype-staging folders..."
          # Look anywhere in the repo (no -maxdepth!)
          mapfile -t ROOTS < <(find . -type d -name sonatype-staging | sort)
      
          if [ "${#ROOTS[@]}" -eq 0 ]; then
            echo "No staging dir found"
            echo "Debug: show target dirs nearby:"
            find . -maxdepth 5 -type d -name target -print | sort || true
            exit 1
          fi
      
          mkdir -p artifacts
      
          for ROOT in "${ROOTS[@]}"; do
            # ROOT is like: ./target/sonatype-staging  or  ./module/target/sonatype-staging
            TARGET_DIR="$(dirname "$ROOT")"                       # .../target
            MODULE_DIR="$(dirname "$TARGET_DIR")"                 # repo root or ./module
            MOD_NAME="$(basename "$MODULE_DIR")"
            # If the bundle is at repo root, MOD_NAME will be "." -> rename to 'root'
            if [ "$MOD_NAME" = "." ] || [ -z "$MOD_NAME" ]; then MOD_NAME="root"; fi
      
            ZIP="artifacts/${MOD_NAME}-sonatype-staging.zip"
            echo "Zipping $ROOT -> $ZIP"
            (cd "$TARGET_DIR" && zip -r "$GITHUB_WORKSPACE/$ZIP" sonatype-staging)
            echo "Created $ZIP"
          done
        shell: bash
      
      - name: Upload artifact (staged bundles)
        uses: actions/upload-artifact@v4
        with:
          name: sonatype-staging-bundles
          path: artifacts/*.zip
          if-no-files-found: error

      - name: Release to Central (sonatypeCentralRelease)
        if: ${{ inputs.doRelease == 'yes' }}
        run: sbt sonatypeCentralRelease
        env:
          SONATYPE_USERNAME: ${{ secrets.SONATYPE_USERNAME }}
          SONATYPE_PASSWORD: ${{ secrets.SONATYPE_PASSWORD }}
