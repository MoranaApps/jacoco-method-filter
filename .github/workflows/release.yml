name: Publish / Release (manual)

on:
  workflow_dispatch:
    inputs:
      doRelease:
        description: "After publishing, call sonaRelease (finalize on Central)?"
        type: choice
        options: ["yes", "no"]
        default: "yes"
      scala213:
        description: "Build for Scala 2.13 (core)"
        type: boolean
        default: true

jobs:
  publish:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17
          cache: sbt

      - name: Install sbt (sbt-extras)
        run: |
          curl -fsSL https://raw.githubusercontent.com/dwijnand/sbt-extras/master/sbt -o sbt
          chmod +x sbt
          sudo mv sbt /usr/local/bin/

      - name: Import GPG private key
        run: |
          echo "${PGP_SECRET}" | gpg --batch --import
          gpg --list-secret-keys --keyid-format LONG
        env:
          PGP_SECRET: ${{ secrets.PGP_SECRET }}

      - name: Show sbt & Java
        run: |
          java -version
          sbt sbtVersion

      - name: Test (core + plugin)
        run: |
          sbt +clean +test

      - name: Echo repo structure & key sbt files
        run: |
          echo "== repo tree ==" && ls -la
          echo "== root project/build.properties ==" && (test -f project/build.properties && cat project/build.properties || echo "(missing)")
          echo "== sbt-plugin/project/build.properties ==" && (test -f sbt-plugin/project/build.properties && cat sbt-plugin/project/build.properties || echo "(missing)")
          echo "== top of build.sbt ==" && head -n 200 build.sbt

      - name: Show effective plugin settings (pre-publish)
        run: |
          set -eux
          sbt -v \
            "project sbtPlugin" \
            "show name" \
            "show organization" \
            "show version" \
            "show scalaVersion" \
            "show scalaBinaryVersion" \
            "show sbtBinaryVersion" \
            "show publishMavenStyle" \
            "show sbtPluginPublishLegacyMavenStyle" \
            "inspect tree publishMavenStyle" \
            "inspect tree sbtPluginPublishLegacyMavenStyle" \
            "show packagedArtifacts"
          echo "== packagedArtifacts above must have filenames WITHOUT _2.12_1.0 in the basename =="

      - name: Show final plugin artifacts (sanity)
        run: |
          sbt -batch -Dsbt.supershell=false -Dsbt.log.noformat=true \
            "project sbtPlugin" "show packagedArtifacts"

      - name: Publish signed artifacts (core + plugin) to Sonatype
        run: |
          # Core (normal)
          sbt +publishSigned
      
          # Plugin: force modern basenames and publish in the SAME sbt run
          sbt -batch -Dsbt.supershell=false -Dsbt.log.noformat=true \
            "project sbtPlugin" \
            'set publishMavenStyle := true' \
            'set sbtPluginPublishLegacyMavenStyle := false' \
            "set makePom / artifact := (makePom / artifact).value.withName(moduleName.value)" \
            "set Compile / packageBin / artifact := (Compile / packageBin / artifact).value.withName(moduleName.value)" \
            "set Compile / packageSrc / artifact := (Compile / packageSrc / artifact).value.withName(moduleName.value)" \
            "set Compile / packageDoc / artifact := (Compile / packageDoc / artifact).value.withName(moduleName.value)" \
            publishSigned
        env:
          SONATYPE_USERNAME: ${{ secrets.SONATYPE_USERNAME }}
          SONATYPE_PASSWORD: ${{ secrets.SONATYPE_PASSWORD }}
          PGP_PASSPHRASE:    ${{ secrets.PGP_PASSPHRASE }}

      - name: List staged bundle contents (post-publish sanity)
        run: |
          set -euo pipefail
          # Try both modern (sonatype-staging) and your old (sona-staging) names
          STAGE_DIR=$(
            { find . -type d -path "*/target/sonatype-staging" -o -path "*/target/sona-staging"; } | head -n1
          )
          echo "STAGE_DIR=${STAGE_DIR:-<none>}"
          if [ -z "${STAGE_DIR}" ]; then
            echo "No local bundle dir found — likely using direct upload (snapshots) or plugin changed mode. Skipping."
            exit 0
          fi
          echo "== tree staged =="
          (cd "$STAGE_DIR"/.. && find "$(basename "$STAGE_DIR")" -maxdepth 3 -type f | sort)

      - name: Zip staged bundle for upload
        run: |
          set -euo pipefail
          STAGE_DIR=$(
            { find . -type d -path "*/target/sonatype-staging" -o -path "*/target/sona-staging"; } | head -n1
          )
          echo "STAGE_DIR=${STAGE_DIR:-<none>}"
          if [ -z "${STAGE_DIR}" ]; then
            echo "No local bundle dir found — nothing to upload. Skipping."
            exit 0
          fi
          (cd "$STAGE_DIR"/.. && zip -r staging_bundle.zip "$(basename "$STAGE_DIR")")
          mkdir -p artifacts && mv "$STAGE_DIR"/../staging_bundle.zip artifacts/

      - name: Upload artifact (staged bundle)
        uses: actions/upload-artifact@v4
        with:
          name: sona-staging-bundle
          path: artifacts/staging_bundle.zip
          if-no-files-found: error

      - name: Show sonatype settings
        run: |
          sbt -batch -Dsbt.supershell=false -Dsbt.log.noformat=true \
            'show ThisBuild / sonatypeCredentialHost' \
            'show ThisBuild / sonatypeRepository' \
            'show ThisBuild / sonatypeProfileName'

      - name: Publish signed artifacts (core + plugin) to Sonatype (s01)
        run: |
          # Core (normal)
          sbt +publishSigned
      
          # Plugin: force modern basenames AND use s01 host in the SAME sbt run
          sbt -batch -Dsbt.supershell=false -Dsbt.log.noformat=true \
            "set ThisBuild / sonatypeCredentialHost := \"s01.oss.sonatype.org\"" \
            "set ThisBuild / sonatypeRepository     := \"https://s01.oss.sonatype.org/service/local\"" \
            "project sbtPlugin" \
            'set publishMavenStyle := true' \
            'set sbtPluginPublishLegacyMavenStyle := false' \
            "set makePom / artifact              := (makePom / artifact).value.withName(moduleName.value)" \
            "set Compile / packageBin / artifact := (Compile / packageBin / artifact).value.withName(moduleName.value)" \
            "set Compile / packageSrc / artifact := (Compile / packageSrc / artifact).value.withName(moduleName.value)" \
            "set Compile / packageDoc / artifact := (Compile / packageDoc / artifact).value.withName(moduleName.value)" \
            publishSigned
        env:
          SONATYPE_USERNAME: ${{ secrets.SONATYPE_USERNAME }}
          SONATYPE_PASSWORD: ${{ secrets.SONATYPE_PASSWORD }}
          PGP_PASSPHRASE:    ${{ secrets.PGP_PASSPHRASE }}

      - name: Show last publish tasks (useful if something failed silently)
        if: always()
        run: |
          sbt -Dsbt.log.noformat=true \
            "project sbtPlugin" \
            "last publishSigned" \
            "last makePom" \
            "last packagedArtifacts"
